// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package hitbtc

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComZukiyHitBTC(in *jlexer.Lexer, out *subscribeResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "jsonrpc":
			out.JsonRPC = string(in.String())
		case "result":
			out.Result = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComZukiyHitBTC(out *jwriter.Writer, in subscribeResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"jsonrpc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JsonRPC))
	}
	{
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Result))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v subscribeResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComZukiyHitBTC(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v subscribeResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComZukiyHitBTC(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *subscribeResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComZukiyHitBTC(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *subscribeResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComZukiyHitBTC(l, v)
}
func easyjson6601e8cdDecodeGithubComZukiyHitBTC1(in *jlexer.Lexer, out *subscribeOrderBookResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "jsonrpc":
			out.JsonRPC = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "params":
			easyjson6601e8cdDecode(in, &out.Params)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComZukiyHitBTC1(out *jwriter.Writer, in subscribeOrderBookResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"jsonrpc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JsonRPC))
	}
	{
		const prefix string = ",\"method\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"params\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode(out, in.Params)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v subscribeOrderBookResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComZukiyHitBTC1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v subscribeOrderBookResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComZukiyHitBTC1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *subscribeOrderBookResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComZukiyHitBTC1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *subscribeOrderBookResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComZukiyHitBTC1(l, v)
}
func easyjson6601e8cdDecode(in *jlexer.Lexer, out *struct {
	Ask       []oBook `json:"ask"`
	Bid       []oBook `json:"bid"`
	Symbol    string  `json:"symbol"`
	Sequence  int     `json:"sequence"`
	Timestamp string  `json:"timestamp"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ask":
			if in.IsNull() {
				in.Skip()
				out.Ask = nil
			} else {
				in.Delim('[')
				if out.Ask == nil {
					if !in.IsDelim(']') {
						out.Ask = make([]oBook, 0, 4)
					} else {
						out.Ask = []oBook{}
					}
				} else {
					out.Ask = (out.Ask)[:0]
				}
				for !in.IsDelim(']') {
					var v1 oBook
					(v1).UnmarshalEasyJSON(in)
					out.Ask = append(out.Ask, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bid":
			if in.IsNull() {
				in.Skip()
				out.Bid = nil
			} else {
				in.Delim('[')
				if out.Bid == nil {
					if !in.IsDelim(']') {
						out.Bid = make([]oBook, 0, 4)
					} else {
						out.Bid = []oBook{}
					}
				} else {
					out.Bid = (out.Bid)[:0]
				}
				for !in.IsDelim(']') {
					var v2 oBook
					(v2).UnmarshalEasyJSON(in)
					out.Bid = append(out.Bid, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "symbol":
			out.Symbol = string(in.String())
		case "sequence":
			out.Sequence = int(in.Int())
		case "timestamp":
			out.Timestamp = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode(out *jwriter.Writer, in struct {
	Ask       []oBook `json:"ask"`
	Bid       []oBook `json:"bid"`
	Symbol    string  `json:"symbol"`
	Sequence  int     `json:"sequence"`
	Timestamp string  `json:"timestamp"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ask\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Ask == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Ask {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"bid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Bid == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Bid {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"sequence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Sequence))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Timestamp))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComZukiyHitBTC2(in *jlexer.Lexer, out *requestParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "method":
			out.Method = string(in.String())
		case "params":
			(out.Params).UnmarshalEasyJSON(in)
		case "id":
			out.ID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComZukiyHitBTC2(out *jwriter.Writer, in requestParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"method\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"params\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Params).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v requestParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComZukiyHitBTC2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v requestParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComZukiyHitBTC2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *requestParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComZukiyHitBTC2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *requestParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComZukiyHitBTC2(l, v)
}
func easyjson6601e8cdDecodeGithubComZukiyHitBTC3(in *jlexer.Lexer, out *params) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "symbol":
			out.Symbol = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComZukiyHitBTC3(out *jwriter.Writer, in params) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v params) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComZukiyHitBTC3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v params) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComZukiyHitBTC3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *params) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComZukiyHitBTC3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *params) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComZukiyHitBTC3(l, v)
}
func easyjson6601e8cdDecodeGithubComZukiyHitBTC4(in *jlexer.Lexer, out *oBook) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "price":
			out.Price = float64(in.Float64Str())
		case "size":
			out.Size = float64(in.Float64Str())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComZukiyHitBTC4(out *jwriter.Writer, in oBook) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64Str(float64(in.Price))
	}
	{
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64Str(float64(in.Size))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v oBook) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComZukiyHitBTC4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v oBook) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComZukiyHitBTC4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *oBook) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComZukiyHitBTC4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *oBook) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComZukiyHitBTC4(l, v)
}
func easyjson6601e8cdDecodeGithubComZukiyHitBTC5(in *jlexer.Lexer, out *Symbols) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Symbols, 0, 1)
			} else {
				*out = Symbols{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 Symbol
			(v7).UnmarshalEasyJSON(in)
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComZukiyHitBTC5(out *jwriter.Writer, in Symbols) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			(v9).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Symbols) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComZukiyHitBTC5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Symbols) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComZukiyHitBTC5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Symbols) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComZukiyHitBTC5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Symbols) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComZukiyHitBTC5(l, v)
}
func easyjson6601e8cdDecodeGithubComZukiyHitBTC6(in *jlexer.Lexer, out *Symbol) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "baseCurrency":
			out.BaseCurrency = string(in.String())
		case "quoteCurrency":
			out.QuoteCurrency = string(in.String())
		case "quantityIncrement":
			out.QuantityIncrement = float64(in.Float64Str())
		case "tickSize":
			out.TickSize = float64(in.Float64Str())
		case "takeLiquidityRate":
			out.TakeLiquidityRate = float64(in.Float64Str())
		case "provideLiquidityRate":
			out.ProvideLiquidityRate = float64(in.Float64Str())
		case "feeCurrency":
			out.FeeCurrency = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComZukiyHitBTC6(out *jwriter.Writer, in Symbol) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"baseCurrency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BaseCurrency))
	}
	{
		const prefix string = ",\"quoteCurrency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.QuoteCurrency))
	}
	{
		const prefix string = ",\"quantityIncrement\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64Str(float64(in.QuantityIncrement))
	}
	{
		const prefix string = ",\"tickSize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64Str(float64(in.TickSize))
	}
	{
		const prefix string = ",\"takeLiquidityRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64Str(float64(in.TakeLiquidityRate))
	}
	{
		const prefix string = ",\"provideLiquidityRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64Str(float64(in.ProvideLiquidityRate))
	}
	{
		const prefix string = ",\"feeCurrency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FeeCurrency))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Symbol) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComZukiyHitBTC6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Symbol) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComZukiyHitBTC6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Symbol) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComZukiyHitBTC6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Symbol) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComZukiyHitBTC6(l, v)
}
func easyjson6601e8cdDecodeGithubComZukiyHitBTC7(in *jlexer.Lexer, out *Err) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			easyjson6601e8cdDecode1(in, &out.Data)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComZukiyHitBTC7(out *jwriter.Writer, in Err) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode1(out, in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Err) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComZukiyHitBTC7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Err) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComZukiyHitBTC7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Err) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComZukiyHitBTC7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Err) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComZukiyHitBTC7(l, v)
}
func easyjson6601e8cdDecode1(in *jlexer.Lexer, out *struct {
	Code        int    `json:"code"`
	Message     string `json:"message"`
	Description string `json:"description"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "message":
			out.Message = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode1(out *jwriter.Writer, in struct {
	Code        int    `json:"code"`
	Message     string `json:"message"`
	Description string `json:"description"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	out.RawByte('}')
}
